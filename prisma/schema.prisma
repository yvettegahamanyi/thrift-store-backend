// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) // Unique identifier for the user
  firstName   String   // User's first name
  lastName    String   // User's last name
  email       String   @unique // User's email address
  password    String   // Excluded in DTOs, but stored in DB
  phoneNumber String?  // User's phone number (optional)
  address     String?  // User's address (optional)
  status      UserStatus @default(ACTIVE) // User's status
  role        UserRole @default(CUSTOMER) // User's role
  isActive    Boolean  @default(true) // Whether the user account is active
  donations   Donation[] // User's donations
  carts       Cart[] // User's carts
  orders      Order[] // User's orders
  createdAt   DateTime @default(now()) // When the user was created
  updatedAt   DateTime @updatedAt // When the user was last updated

    @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  DONOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}


model Donation {
  id           String          @id @default(uuid())
  title        String
  description  String
  status       DonationStatus  @default(PENDING)
  pickupAddress String       
  pickupDate   DateTime       
  donorId      String
  products     Product[] // User's donations
  donor        User            @relation(fields: [donorId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("donations")
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  quantity    Int      @default(1)
  isActive    Boolean  @default(true)
  donationId  String?  
  cartId    String?  // Nullable foreign key
  cart      Cart?    @relation(fields: [cartId], references: [id])
  orderId   String?   // Foreign key to Order (nullable, if product is not yet ordered)
  order     Order?    @relation(fields: [orderId], references: [id])
  donation    Donation? @relation(fields: [donationId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

model Cart {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  isActive  Boolean   @default(true)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("carts")
}


model Order {
  id              String      @id @default(uuid())
  status          OrderStatus @default(PROCESSING)
  refNumber       String
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress String?
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  products        Product[] // One order can have many products
  payment        Payment?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model Payment {
  id            String         @id @default(uuid())
  status       PaymentStatus  @default(PENDING)
  billNumber   String
  amount       Decimal        @db.Decimal(10, 2)
  paymentMethod String
  orderId      String         @unique
  order        Order          @relation(fields: [orderId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("payments")
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}